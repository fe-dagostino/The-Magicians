
presence_group = { 
              undefined   = 0;
              required    = 1;
              conditional = 2;
              optional    = 3;
           };
////
// Valid values for "presence" field are the following:
//    - "undefined"   
//    - "required"    
//    - "conditional" 
//    - "optional"    

gtfs =
{
  feeds = ( 
            { 
              name          = "agency"
              filename      = "agency.txt";
              presence      = "required";
              dependencies  = [];
            },
            { 
              name          = "stops";
              filename      = "stops.txt";
              presence      = "required";
              dependencies  = [];
            },
            { 
              name          = "routes";
              filename      = "routes.txt";
              presence      = "required";
              dependencies  = ["agency"];
            },
            { 
              name          = "trips";
              filename      = "trips.txt";
              presence      = "required";
              dependencies  = ["calendar","calendar_dates","shapes","routes"];
            },
            { 
              name          = "stop_times";
              filename      = "stop_times.txt";
              presence      = "required";
              dependencies  = ["trips","stops"];
            },
            { 
              name          = "calendar";
              filename      = "calendar.txt";
              presence      = "conditional";
              dependencies  = [];
            },
            { 
              name          = "calendar_dates";
              filename      = "calendar_dates.txt";
              presence      = "conditional";
              dependencies  = [];
            },
            { 
              name          = "fare_attributes";
              filename      = "fare_attributes.txt";
              presence      = "optional";
              dependencies  = ["agency"];
            },
            { 
              name          = "fare_rules";
              filename      = "fare_rules.txt";
              presence      = "conditional";
              dependencies  = ["fare_attributes","stops","routes"];
            },
            { 
              name          = "fare_products";
              filename      = "fare_products.txt";
              presence      = "optional";
              dependencies  = [];
            },
            { 
              name          = "fare_leg_rules";
              filename      = "fare_leg_rules.txt";
              presence      = "optional";
              dependencies  = [];
            },
            { 
              name          = "fare_transfer_rules";
              filename      = "fare_transfer_rules.txt";
              presence      = "optional";
              dependencies  = [];
            },
            { 
              name          = "areas";
              filename      = "areas.txt";
              presence      = "optional";
              dependencies  = [];
            },
            { 
              name          = "stop_areas";
              filename      = "stop_areas.txt";
              presence      = "optional";
              dependencies  = ["stops","areas"];
            },
            { 
              name          = "shapes";
              filename      = "shapes.txt";
              presence      = "optional";
              dependencies  = [];
            },
            { 
              name          = "frequencies";
              filename      = "frequencies.txt";
              presence      = "optional";
              dependencies  = ["trips"];
            },
            { 
              name          = "transfers";
              filename      = "transfers.txt";
              presence      = "optional";
              dependencies  = ["trips","routes","stops"];
            },
            { 
              name          = "pathways";
              filename      = "pathways.txt";
              presence      = "optional";
              dependencies  = [];
            },
            { 
              name          = "levels";
              filename      = "levels.txt";
              presence      = "conditional";
              dependencies  = [];
            },
            { 
              name          = "translations";
              filename      = "translations.txt";
              presence      = "optional";
              dependencies  = [];
            },
            { 
              name          = "feed_info";
              filename      = "feed_info.txt";
              presence      = "optional";
              dependencies  = [];
            },
            { 
              name          = "attributions";
              filename      = "attributions.txt";
              presence      = "optional";
              dependencies  = ["agency","routes","trips"];
            },
          );
  
  // agency.txt
  agency = {
    // Mandatory fields required for the input feed
    mandatory-fields = ["agency_id","agency_name","agency_url","agency_timezone"];
    output-header    = ["agency_id","agency_name","agency_url","agency_timezone","agency_lang","agency_phone","agency_fare_url","agency_email"];
    filter-fields    = ["agency_id","agency_name","agency_url","agency_timezone"];
    //default-content  = ( [], [] );
    
    agency_id = {
      filters_chain= ("empty","length","unique");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };
      unique = {
        level  = "error";
        stop   = false;
        params = [];
      };
    };

    agency_name = {
      filters_chain= ("empty","length");
      empty = {
        level  = "error";
        stop   = true;      // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      length = {
        level  = "error";
        stop   = false;
        params = ["1","50"];
      };    
    };

    agency_url = {
      filters_chain= ("empty","length");
      empty = {
        level  = "error";
        stop   = true;      // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      length = {
        level  = "error";
        stop   = false;
        params = ["7","1000"];
      };    
    };

    // Valid Time Zones are listed at the following url.
    // https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    agency_timezone = {
      filters_chain= ("empty");
      empty = {
        level  = "error";
        stop   = true;      // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
    };

  };

  // stops.txt
  stops = {
    // Mandatory fields required for the input feed
    mandatory-fields = ["stop_id"];
    output-header    = ["stop_id","stop_code","stop_name","tts_stop_name","stop_desc","stop_lat","stop_lon","zone_id","stop_url","location_type","parent_station","stop_timezone","wheelchair_boarding","level_id","platform_code"];
    filter-fields    = ["stop_id","stop_code","stop_name","stop_desc","stop_lat","stop_lon","zone_id","stop_url","location_type","parent_station","stop_timezone","wheelchair_boarding"];
    //default-content  = ( [], [] );
    
    stop_id = {
      filters_chain= ("empty","length","unique");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };
      unique = {
        level  = "error";
        stop   = false;
        params = [];
      };
    };

    stop_code = {
      filters_chain= ("length");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };
    };

    stop_name = {
      filters_chain= ("empty","length");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","100"];
      };
      unique = {
        level  = "error";
        stop   = false;
        params = [];
      };
    };

    stop_desc = {
      filters_chain= ("length","ne");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","1000"];
      };
      ne = {
        level  = "warning";
        stop   = false;
        params = ["stop_name"];
      };
    };

    stop_lat = {
      filters_chain= ("empty","format","fix_real");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      format = {
        level  = "error";
        stop   = false;
        // latitude from -90 to +90 with 10 decimal digits
        params = ["[+-]?(([0-8]?[0-9])|90)?[.][0-9]{0,10}"];
      };    
      fix_real = {
        level  = "error";
        stop   = false;       
        params = ["10"];
      };
    };

    stop_lon = {
      filters_chain= ("empty","format","fix_real");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      format = {
        level  = "error";
        stop   = false;
        // latitude from -180 to +180 with 10 decimal digits
        params = ["[+-]?([0]?[0-9]?[0-9]|1[0-7][0-9]|180)?[.][0-9]{0,10}"];
      };    
      fix_real = {
        level  = "error";
        stop   = false;       
        params = ["10"];
      };
    };

    zone_id = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["[0-9]{0,30}"];
      };    
    };

    stop_url = {
      filters_chain= ("length");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","2048"];
      };    
    };

    location_type = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["[0-4]?"];
      };      
    };

    parent_station = {
      filters_chain= ("length");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","10"];
      };        
    };

    // Valid Time Zones are listed at the following url.
    // https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    stop_timezone = {
      filters_chain= ("length");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };         
    };

    wheelchair_boarding = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["[0-2]?"];
      };      
    };
  };

  // routes.txt
  routes = {
    // Mandatory fields required for the input feed
    mandatory-fields = ["route_id","agency_id"];
    output-header    = ["route_id","agency_id","route_short_name","route_long_name","route_desc","route_type","route_url","route_color","route_text_color","route_sort_order","continuous_pickup","continuous_drop_off","network_id"];
    filter-fields    = ["route_id","agency_id","route_short_name","route_long_name","route_desc","route_type","route_url","route_color","route_text_color","route_sort_order","continuous_pickup","continuous_drop_off","network_id"];
    //default-content  = ( [], [] );
    
    route_id = {
      filters_chain= ("empty","length","unique");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };
      unique = {
        level  = "error";
        stop   = false;
        params = [];
      };
    };

    agency_id = {
      filters_chain= ("empty","length");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };    
    };
    
    route_short_name = {
      filters_chain= ("length");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","20"];
      };     
    };
    
    route_long_name = {
      filters_chain= ("length");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","100"];
      };     
    };

    route_desc = {
      filters_chain= ("length");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","1000"];
      };     
    };

    route_type = {
      filters_chain= ("empty","format");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      format = {
        level  = "error";
        stop   = false;
        params = ["[0-7]|11|12"];
      };    
    };

    route_url = {
      filters_chain= ("length");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","2048"];
      };     
    };

    route_color = {
      filters_chain= ("length");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","6"];
      };     
    };

    route_text_color = {
      filters_chain= ("length","ne");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","6"];
      };
      ne = {
        level  = "error";
        stop   = false;
        params = ["route_color"];
      };
    };

    route_sort_order = {};

    continuous_pickup = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["[0-3]"];
      };    
    };

    continuous_drop_off = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["[0-3]"];
      };      
    };
    network_id = {
      filters_chain= ("length");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };
    };
  };

  // trips.txt
  trips = {
    // Mandatory fields required for the input feed
    mandatory-fields = ["route_id","service_id","trip_id"];
    output-header    = ["route_id","service_id","trip_id","trip_headsign","trip_short_name","direction_id","block_id","shape_id","wheelchair_accessible","bikes_allowed"];
    filter-fields    = ["route_id","service_id","trip_id","trip_headsign","trip_short_name","direction_id","block_id","shape_id","wheelchair_accessible","bikes_allowed"];
    //default-content  = ( [], [] );
    processing = {
      enable = [ "find_orphan_routes",
                 "find_orphan_services",
                 "find_orphan_shapes", "delete_unused_shapes", "optimize_shapes_usage" ];
    
      //  Raise a log message when for a specific trip is not possible to retrieve route information, 
      //  since specified route_id do not exist in routes.
      find_orphan_routes = {
        level  = "error";
        params = [];
      }; 

      //  Raise a log message when for a specific trip is not possible to retrieve service information, 
      //  since specified service_id do not exist in both calendar or calendar_dates.
      find_orphan_services = {
        level  = "error";
        params = [];
      }; 

      //  Raise a log message when for a specific trip is not possible to retrieve shape information, 
      //  since specified shape_id do not exist in shapes.
      find_orphan_shapes = {
        level  = "error";
        params = [];
      }; 

      //  Mark as deleted all shape_id that are not linked with a trip_id.
      //  All of such shapes will be scluded from output.
      delete_unused_shapes = {
        level  = "warning";
        params = [];
      };

      //  Merge all shapes that are duplicated in shapes and replace the link in trips. 
      //  This optimization in some cases can reduce the size of shapes.txt.
      optimize_shapes_usage = {
        level  = "warning";
        params = [];
      };

 

    };
    
    route_id = {
      filters_chain= ("empty","length");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };
    };

    service_id = {
      filters_chain= ("empty","length");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","50"];
      };
    };

    trip_id = {
      filters_chain= ("empty","length","unique");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };
      unique = {
        level  = "error";
        stop   = false;
        params = [];
      };      
    };

    trip_headsign = {
      filters_chain= ("empty","length","format");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","100"];
      };
      format = {
        level  = "error";
        stop   = false;
        params = ["[^\\s]+(\\s+[^\\s]+)*"];
      };      
    };

    trip_short_name = {
      filters_chain= ("length");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","20"];
      };
    };

    direction_id = {
      filters_chain= ("empty","format");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      format = {
        level  = "error";
        stop   = false;
        params = ["0|1"];
      };    
    };

    block_id = {
      filters_chain= ("length");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };    
    };

    shape_id = {
      filters_chain= ("empty","length");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };
    };

    wheelchair_accessible = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["[0-2]"];
      };      
    };

    bikes_allowed = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["[0-2]"];
      };      
    };
  };

  // stop_times.txt
  stop_times = {
    // Mandatory fields required for the input feed
    mandatory-fields = ["trip_id","stop_id","stop_sequence"];
    output-header    = ["trip_id","arrival_time","departure_time","stop_id","stop_sequence","stop_headsign","pickup_type","drop_off_type","continuous_pickup","continuous_drop_off","shape_dist_traveled","timepoint"];
    filter-fields    = ["trip_id","arrival_time","departure_time","stop_id","stop_sequence","stop_headsign","pickup_type","drop_off_type","continuous_pickup","continuous_drop_off","shape_dist_traveled","timepoint"];
    //default-content  = ( [], [] );
    processing = {
      enable = [ "find_orphan_links" ];
    
      //  Raise a log message when for a specific trip is not possible to retrieve stop or trip information, 
      //  since specified stop_id or trip_id do not exist respectively in stops or trips.
      find_orphan_links = {
        level  = "error";
        params = [];
      }; 
    };

    trip_id = {
      filters_chain= ("empty","length","unique");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };
      unique = {
        level  = "error";
        stop   = false;
        params = ["stop_sequence"];
      };  
    };

    arrival_time = {
      filters_chain= ("empty","format");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      format = {
        level  = "error";
        stop   = false;
        params = ["([0-3]?[0-9]|4[0-8]):([0-5]?[0-9]):([0-5]?[0-9])"];
      };       
    };

    departure_time = {
      filters_chain= ("empty","format");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      format = {
        level  = "error";
        stop   = false;
        params = ["([0-3]?[0-9]|4[0-8]):([0-5]?[0-9]):([0-5]?[0-9])"];
      };      
    };

    stop_id = {
      filters_chain= ("empty","length");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };  
    };

    stop_sequence = {
      filters_chain= ("empty","format");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      format = {
        level  = "error";
        stop   = false;
        params = ["[0-9]+"];
      };      
    };

    stop_headsign = {
      filters_chain= ("length");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","100"];
      };      
    };

    pickup_type = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["[0-3]?"];
      };     
    };
    drop_off_type = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["[0-3]?"];
      };      
    };

    continuous_pickup = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["[0-3]?"];
      };      
    };

    continuous_drop_off = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["[0-3]?"];
      };      
    };

    shape_dist_traveled = {
      filters_chain= ("empty","format","fix_real");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      format = {
        level  = "error";
        stop   = false;
        params = ["[+-]?([0-9]{0,12}[.])?[0-9]{0,10}"];
      };         
      fix_real = {
        level  = "error";
        stop   = false;       
        params = ["10"];
      };
    };

    // 0 - Times are considered approximate.
    // 1 or empty - Times are considered exact.
    timepoint = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["[0-1]?"];
      };      
    };
  };

  // calendar.txt
  calendar = {
    // Mandatory fields required for the input feed
    mandatory-fields = ["service_id","monday","tuesday","wednesday","thursday","friday","saturday","sunday","start_date","end_date"];
    output-header    = ["service_id","monday","tuesday","wednesday","thursday","friday","saturday","sunday","start_date","end_date"];
    filter-fields    = ["service_id","monday","tuesday","wednesday","thursday","friday","saturday","sunday","start_date","end_date"];
    //default-content  = ( [], [] );
    
    service_id = {
      filters_chain= ("empty","length","unique");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","50"];
      };
      unique = {
        level  = "error";
        stop   = false;
        params = [];
      };  
    };

    monday = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["0|1"];
      };  
    };

    tuesday = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["0|1"];
      };  
    };    

    wednesday = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["0|1"];
      };  
    };

    thursday = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["0|1"];
      };  
    };

    friday = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["0|1"];
      };  
    };    

    saturday = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["0|1"];
      };  
    };    

    sunday = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["0|1"];
      };  
    };

    start_date = {
      filters_chain= ("format","le");
      format = {
        level  = "error";
        stop   = false;
        params = ["(20[0-9]{2})(0[1-9]|1[0-2])(0[1-9]|[1|2][0-9]|3[0|1])"];
      };
      le = {
        level  = "error";
        stop   = false;
        params = ["end_date"];
      };
    };

    end_date = {
      filters_chain= ("format","expired");
      format = {
        level  = "error";
        stop   = false;
        params = ["(20[0-9]{2})(0[1-9]|1[0-2])(0[1-9]|[1|2][0-9]|3[0|1])"];
      };
      expired = {
        level  = "error";
        stop   = false;
        params = ["Europe/Rome"];
      };
    };
  };

  // calendar_dates.txt
  calendar_dates = {
    // Mandatory fields required for the input feed
    mandatory-fields = ["service_id","date","exception_type"];
    output-header    = ["service_id","date","exception_type"];
    filter-fields    = ["service_id","date","exception_type"];
    //default-content  = ( [], [] );
    
    service_id = {
      filters_chain= ("empty","length","unique");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","50"];
      };
      unique = {
        level  = "error";
        stop   = false;
        params = ["date"];
      };  
    };

    date = {
      filters_chain= ("empty","format");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      format = {
        level  = "error";
        stop   = false;
        params = ["(20[0-9]{2})(0[1-9]|1[0-2])(0[1-9]|[1|2][0-9]|3[0|1])"];
      };      
    };

    exception_type = {
      filters_chain= ("empty","format");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      format = {
        level  = "error";
        stop   = false;
        params = ["1|2"];
      };      
    };

  };

  // shapes.txt
  shapes = {
    // Mandatory fields required for the input feed
    mandatory-fields = ["shape_id","shape_pt_lat","shape_pt_lon","shape_pt_sequence"];
    output-header    = ["shape_id","shape_pt_lat","shape_pt_lon","shape_pt_sequence","shape_dist_traveled"];
    filter-fields    = ["shape_id","shape_pt_lat","shape_pt_lon","shape_pt_sequence","shape_dist_traveled"];
    //default-content  = ( [], [] );
    processing       = {
      enable = [ "check_distance" ];
    
      //  Compute the distance for all the shapes replacing current values.
      //  Note: be sure to enable this function only if you want to replace current values.
      //        Take care that computed distance should be consistent also with stop_times.txt,
      //        so an error in shapes.txt most likely means that such error is also present in stop_times.txt.
      //  Parameters:
      //   1. decimal precision, number of decimal digit default 10.
      compute_distance = {
        level  = "error";
        params = ["10"];
      };   

      //  Check if pt sequence is respected.
      //  Check if pt seqN and pt seqN+1 have different coordinates. 
      //  Check if distance for pt seqN is less than distance for pt seqN+1. 
      //  Compute distance and trace Delta Error between computed distance and distance retrieved from source.
      //  NOTE: if also compute_distance() have been enabled check_distance() will be 
      //        performed after compute_distance() allowing to remove all noisy points.
      //  Parameters:
      //   1. decimal precision, number of decimal digit default 10.
      //   2. accepted error (in km) between computed distance and distance retrieved from source default 0.02 ( 20m ) .
      //   3. skip double points (with same coordinates) when detected. Default 'false', to enable set to 'true'. 
      //      Effect will be that duplicated points will be ignored during save operation.
      //   4. skip points that are too closer. Threshold distance is specifiedi whit next parameter.
      //      By defalt is disabled, and then parmeter 5. is ignored. To enable this function set to 'true'.
      //   5. Threshold used to determine if two consecutive points are too closer. Default 0.005 ( 5m ), so if distance
      //      between two points is less than or equal to 1m the second point will be ignored and not present in the output.
      check_distance = {
        level  = "error";
        params = ["10","0.02","true","true","0.005"];
      };  
  
    };

    shape_id = {
      filters_chain= ("empty","length","unique");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };
      unique = {
        level  = "error";
        stop   = false;
        params = ["shape_pt_sequence"];
      };  
    };

    shape_pt_lat = {
      filters_chain= ("empty","format","fix_real");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      format = {
        level  = "error";
        stop   = false;
        // latitude from -90 to +90 with 10 decimal digits
        params = ["[+-]?(([0-8]?[0-9])|90)?[.][0-9]{0,10}"];
      };    
      fix_real = {
        level  = "error";
        stop   = false;       
        params = ["10"];
      };
    };

    shape_pt_lon = {
      filters_chain= ("empty","format","fix_real");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      format = {
        level  = "error";
        stop   = false;
        // latitude from -180 to +180 with 10 decimal digits
        params = ["[+-]?([0]?[0-9]?[0-9]|1[0-7][0-9]|180)?[.][0-9]{0,10}"];
      };    
      fix_real = {
        level  = "error";
        stop   = false;       
        params = ["10"];
      };
    };

    shape_pt_sequence = {
      filters_chain= ("empty","format");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      format = {
        level  = "error";
        stop   = false;
        params = ["[0-9]+"];
      };      
    };

    shape_dist_traveled = {
      filters_chain= ("empty","format","fix_real");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      format = {
        level  = "error";
        stop   = false;
        params = ["[+-]?([0-9]{0,12}[.])?[0-9]{0,10}"];
      };        
      fix_real = {
        level  = "error";
        stop   = false;       
        params = ["10"];
      };
    };
  };  

  // transfers.txt
  transfers = {
    // Mandatory fields required for the input feed
    mandatory-fields = ["from_stop_id","to_stop_id","from_route_id","to_route_id","from_trip_id","to_trip_id","transfer_type"];
    output-header    = ["from_stop_id","to_stop_id","from_route_id","to_route_id","from_trip_id","to_trip_id","transfer_type","min_transfer_time"];
    filter-fields    = ["from_stop_id","to_stop_id","from_route_id","to_route_id","from_trip_id","to_trip_id","transfer_type","min_transfer_time"];
    //default-content  = ( [], [] );
    
    from_stop_id = {
      filters_chain= ("length","unique");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };
      unique = {
        level  = "error";
        stop   = false;
        params = ["to_stop_id","from_trip_id","to_trip_id","from_route_id","to_route_id"];
      };  
    };

    to_stop_id = {
      filters_chain= ("length");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };
    };

    from_route_id = {
      filters_chain= ("length");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };
    };

    to_route_id = {
      filters_chain= ("length");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };
    };

    from_trip_id = {
      filters_chain= ("length");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };
    };

    to_trip_id = {
      filters_chain= ("length");
      length = {
        level  = "error";
        stop   = false;
        params = ["-1","30"];
      };
    };

    transfer_type = {
      filters_chain= ("empty","format");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
      format = {
        level  = "error";
        stop   = false;
        params = ["[0-5]"];
      };
    };

    min_transfer_time = {
      filters_chain= ("format");
      format = {
        level  = "error";
        stop   = false;
        params = ["[+]?[0-9]*"];
      };
    };
  };

  // feed_info.txt
  feed_info = {
    // Mandatory fields required for the input feed
    mandatory-fields = ["feed_publisher_name","feed_publisher_url","feed_lang"];
    output-header    = ["feed_publisher_name","feed_publisher_url","feed_lang","default_lang","feed_start_date","feed_end_date","feed_version","feed_contact_email","feed_contact_url"];
    filter-fields    = ["feed_publisher_name","feed_publisher_url","feed_lang"];
    //default-content  = ( [], [] );
    
    feed_publisher_name = {
      filters_chain= ("empty");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
    };

    feed_publisher_url = {
      filters_chain= ("empty");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
    };

    feed_lang = {
      filters_chain= ("empty");
      empty = {
        level  = "error";
        stop   = true;       // no reason to proceed with next filter if field is empty
        params = ["false"];
      };
    };

  };

};
